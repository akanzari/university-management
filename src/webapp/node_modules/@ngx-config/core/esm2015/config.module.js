import { APP_INITIALIZER, Inject, InjectionToken, NgModule, Optional, SkipSelf } from '@angular/core';
import { ConfigLoader, ConfigStaticLoader } from './config.loader';
import { ConfigPipe } from './config.pipe';
import { ConfigService } from './config.service';
import * as i0 from "@angular/core";
export const configFactory = () => new ConfigStaticLoader();
export const initializerFactory = (config) => {
    const res = () => config.init();
    return res;
};
export const CONFIG_FORROOT_GUARD = new InjectionToken('CONFIG_FORROOT_GUARD');
export function provideForRootGuard(config) {
    if (config) {
        throw new Error(`ConfigModule.forRoot() called twice. Lazy loaded modules should use ConfigModule.forChild() instead.`);
    }
    return 'guarded';
}
export class ConfigModule {
    constructor(guard) { }
    static forRoot(configuredProvider = {
        provide: ConfigLoader,
        useFactory: configFactory
    }) {
        return {
            ngModule: ConfigModule,
            providers: [
                configuredProvider,
                ConfigService,
                {
                    provide: APP_INITIALIZER,
                    useFactory: initializerFactory,
                    deps: [ConfigService],
                    multi: true
                },
                {
                    provide: CONFIG_FORROOT_GUARD,
                    useFactory: provideForRootGuard,
                    deps: [[ConfigService, new Optional(), new SkipSelf()]]
                }
            ]
        };
    }
    static forChild() {
        return {
            ngModule: ConfigModule
        };
    }
}
ConfigModule.ɵmod = i0.ɵɵdefineNgModule({ type: ConfigModule });
ConfigModule.ɵinj = i0.ɵɵdefineInjector({ factory: function ConfigModule_Factory(t) { return new (t || ConfigModule)(i0.ɵɵinject(CONFIG_FORROOT_GUARD, 8)); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(ConfigModule, { declarations: [ConfigPipe], exports: [ConfigPipe] }); })();
(function () { i0.ɵsetClassMetadata(ConfigModule, [{
        type: NgModule,
        args: [{
                declarations: [ConfigPipe],
                exports: [ConfigPipe]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [CONFIG_FORROOT_GUARD]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtY29uZmlnL2NvcmUvIiwic291cmNlcyI6WyJjb25maWcubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBdUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0gsT0FBTyxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQUVqRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO0FBRTVELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsTUFBcUIsRUFBRSxFQUFFO0lBRTFELE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVoQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFHL0UsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE1BQXNCO0lBQ3hELElBQUksTUFBTSxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxzR0FBc0csQ0FBQyxDQUFDO0tBQ3pIO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQU1ELE1BQU0sT0FBTyxZQUFZO0lBa0N2QixZQUFzRCxLQUFVLElBQUcsQ0FBQztJQWpDcEUsTUFBTSxDQUFDLE9BQU8sQ0FDWixxQkFBMEI7UUFDeEIsT0FBTyxFQUFFLFlBQVk7UUFDckIsVUFBVSxFQUFFLGFBQWE7S0FDMUI7UUFFRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLFlBQVk7WUFDdEIsU0FBUyxFQUFFO2dCQUNULGtCQUFrQjtnQkFDbEIsYUFBYTtnQkFDYjtvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsVUFBVSxFQUFFLGtCQUFrQjtvQkFDOUIsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDO29CQUNyQixLQUFLLEVBQUUsSUFBSTtpQkFDWjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixVQUFVLEVBQUUsbUJBQW1CO29CQUMvQixJQUFJLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksUUFBUSxFQUFFLENBQUMsQ0FBQztpQkFDeEQ7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVE7UUFDYixPQUFPO1lBQ0wsUUFBUSxFQUFFLFlBQVk7U0FDdkIsQ0FBQztJQUNKLENBQUM7O2dEQS9CVSxZQUFZO3VHQUFaLFlBQVksY0FrQ1Msb0JBQW9CO3dGQWxDekMsWUFBWSxtQkFIUixVQUFVLGFBQ2YsVUFBVTtvQ0FFVCxZQUFZO2NBSnhCLFFBQVE7ZUFBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxVQUFVLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQzthQUN0Qjs7c0JBbUNjLFFBQVE7O3NCQUFJLE1BQU07dUJBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBJbmplY3QsIEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbmZpZ0xvYWRlciwgQ29uZmlnU3RhdGljTG9hZGVyIH0gZnJvbSAnLi9jb25maWcubG9hZGVyJztcbmltcG9ydCB7IENvbmZpZ1BpcGUgfSBmcm9tICcuL2NvbmZpZy5waXBlJztcbmltcG9ydCB7IENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2NvbmZpZy5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IGNvbmZpZ0ZhY3RvcnkgPSAoKSA9PiBuZXcgQ29uZmlnU3RhdGljTG9hZGVyKCk7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplckZhY3RvcnkgPSAoY29uZmlnOiBDb25maWdTZXJ2aWNlKSA9PiB7XG4gIC8vIHdvcmthcm91bmQgZm9yIEFvVCBjb21waWxhdGlvblxuICBjb25zdCByZXMgPSAoKSA9PiBjb25maWcuaW5pdCgpO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5leHBvcnQgY29uc3QgQ09ORklHX0ZPUlJPT1RfR1VBUkQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0NPTkZJR19GT1JST09UX0dVQVJEJyk7XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmx5LWFycm93LWZ1bmN0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVGb3JSb290R3VhcmQoY29uZmlnPzogQ29uZmlnU2VydmljZSk6IGFueSB7XG4gIGlmIChjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvbmZpZ01vZHVsZS5mb3JSb290KCkgY2FsbGVkIHR3aWNlLiBMYXp5IGxvYWRlZCBtb2R1bGVzIHNob3VsZCB1c2UgQ29uZmlnTW9kdWxlLmZvckNoaWxkKCkgaW5zdGVhZC5gKTtcbiAgfVxuXG4gIHJldHVybiAnZ3VhcmRlZCc7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0NvbmZpZ1BpcGVdLFxuICBleHBvcnRzOiBbQ29uZmlnUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgQ29uZmlnTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoXG4gICAgY29uZmlndXJlZFByb3ZpZGVyOiBhbnkgPSB7XG4gICAgICBwcm92aWRlOiBDb25maWdMb2FkZXIsXG4gICAgICB1c2VGYWN0b3J5OiBjb25maWdGYWN0b3J5XG4gICAgfVxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENvbmZpZ01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQ29uZmlnTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIGNvbmZpZ3VyZWRQcm92aWRlcixcbiAgICAgICAgQ29uZmlnU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgICAgICB1c2VGYWN0b3J5OiBpbml0aWFsaXplckZhY3RvcnksXG4gICAgICAgICAgZGVwczogW0NvbmZpZ1NlcnZpY2VdLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBDT05GSUdfRk9SUk9PVF9HVUFSRCxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBwcm92aWRlRm9yUm9vdEd1YXJkLFxuICAgICAgICAgIGRlcHM6IFtbQ29uZmlnU2VydmljZSwgbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpXV1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZm9yQ2hpbGQoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxDb25maWdNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IENvbmZpZ01vZHVsZVxuICAgIH07XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHlcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChDT05GSUdfRk9SUk9PVF9HVUFSRCkgZ3VhcmQ6IGFueSkge31cbn1cbiJdfQ==