import { Injectable } from '@angular/core';
import { ConfigLoader } from './config.loader';
import * as i0 from "@angular/core";
import * as i1 from "./config.loader";
export class ConfigService {
    constructor(loader) {
        this.loader = loader;
    }
    init() {
        return this.loader.loadSettings().then((res) => (this.settings = res));
    }
    getSettings(key, defaultValue) {
        if (!key || (Array.isArray(key) && !key[0])) {
            return this.settings;
        }
        const paths = !Array.isArray(key) ? key.split('.') : key;
        let result = paths.reduce((acc, current) => acc && acc[current], this.settings);
        if (result === undefined) {
            result = defaultValue;
            if (result === undefined) {
                throw new Error(`No setting found with the specified key [${paths.join('/')}]!`);
            }
        }
        return result;
    }
}
ConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.ConfigLoader)); };
ConfigService.ɵprov = i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac });
(function () { i0.ɵsetClassMetadata(ConfigService, [{
        type: Injectable
    }], function () { return [{ type: i1.ConfigLoader }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWNvbmZpZy9jb3JlLyIsInNvdXJjZXMiOlsiY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQUcvQyxNQUFNLE9BQU8sYUFBYTtJQUd4QixZQUFxQixNQUFvQjtRQUFwQixXQUFNLEdBQU4sTUFBTSxDQUFjO0lBQUcsQ0FBQztJQUU3QyxJQUFJO1FBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELFdBQVcsQ0FBVSxHQUE0QixFQUFFLFlBQWtCO1FBQ25FLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ3RCO1FBRUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFFekQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQVEsRUFBRSxPQUFlLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTdGLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN4QixNQUFNLEdBQUcsWUFBWSxDQUFDO1lBRXRCLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbEY7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OzBFQTNCVSxhQUFhO3FEQUFiLGFBQWEsV0FBYixhQUFhO29DQUFiLGFBQWE7Y0FEekIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29uZmlnTG9hZGVyIH0gZnJvbSAnLi9jb25maWcubG9hZGVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbmZpZ1NlcnZpY2Uge1xuICBwcm90ZWN0ZWQgc2V0dGluZ3M6IGFueTtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBsb2FkZXI6IENvbmZpZ0xvYWRlcikge31cblxuICBpbml0KCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVyLmxvYWRTZXR0aW5ncygpLnRoZW4oKHJlczogYW55KSA9PiAodGhpcy5zZXR0aW5ncyA9IHJlcykpO1xuICB9XG5cbiAgZ2V0U2V0dGluZ3M8VCA9IGFueT4oa2V5Pzogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiwgZGVmYXVsdFZhbHVlPzogYW55KTogVCB7XG4gICAgaWYgKCFrZXkgfHwgKEFycmF5LmlzQXJyYXkoa2V5KSAmJiAha2V5WzBdKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3M7XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aHMgPSAhQXJyYXkuaXNBcnJheShrZXkpID8ga2V5LnNwbGl0KCcuJykgOiBrZXk7XG5cbiAgICBsZXQgcmVzdWx0ID0gcGF0aHMucmVkdWNlKChhY2M6IGFueSwgY3VycmVudDogc3RyaW5nKSA9PiBhY2MgJiYgYWNjW2N1cnJlbnRdLCB0aGlzLnNldHRpbmdzKTtcblxuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0ID0gZGVmYXVsdFZhbHVlO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzZXR0aW5nIGZvdW5kIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgWyR7cGF0aHMuam9pbignLycpfV0hYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19