{"version":3,"sources":["ng://@ngx-config/core/config.loader.ts","ng://@ngx-config/core/config.service.ts","ng://@ngx-config/core/config.pipe.ts","ng://@ngx-config/core/config.module.ts"],"names":["ConfigStaticLoader","providedSettings","this","prototype","loadSettings","Promise","resolve","ConfigService","loader","init","_this","then","res","settings","getSettings","key","defaultValue","Array","isArray","paths","split","result","reduce","acc","current","undefined","Error","join","core","ɵɵinject","ConfigLoader","factory","ɵfac","Injectable","ConfigPipe","config","transform","value","ɵɵdirectiveInject","pure","Pipe","name","configFactory","initializerFactory","CONFIG_FORROOT_GUARD","InjectionToken","provideForRootGuard","ConfigModule","guard","forRoot","configuredProvider","provide","useFactory","ngModule","providers","APP_INITIALIZER","deps","multi","Optional","SkipSelf","forChild","declarations","exports","NgModule","Inject"],"mappings":"oUAAA,0BAKE,SAAAA,EAA6BC,GAAAC,KAAAD,iBAAAA,EAM/B,OAHED,EAAAG,UAAAC,aAAA,WACE,OAAOC,QAAQC,QAAQJ,KAAKD,mBAEhCD,kBCHE,SAAAO,EAAqBC,GAAAN,KAAAM,OAAAA,SAErBD,EAAAJ,UAAAM,KAAA,WAAA,IAAAC,EAAAR,KACE,OAAOA,KAAKM,OAAOJ,eAAeO,MAAK,SAACC,GAAa,OAACF,EAAKG,SAAWD,MAGxEL,EAAAJ,UAAAW,YAAA,SAAqBC,EAA8BC,GACjD,IAAKD,GAAQE,MAAMC,QAAQH,KAASA,EAAI,GACtC,OAAOb,KAAKW,SAGd,IAAMM,EAASF,MAAMC,QAAQH,GAAwBA,EAAjBA,EAAIK,MAAM,KAE1CC,EAASF,EAAMG,QAAO,SAACC,EAAUC,GAAoB,OAAAD,GAAOA,EAAIC,KAAUtB,KAAKW,UAEnF,QAAeY,IAAXJ,QAGaI,KAFfJ,EAASL,GAGP,MAAM,IAAIU,MAAM,4CAA4CP,EAAMQ,KAAK,KAAI,MAI/E,OAAON,oCA1BEd,GAAaqB,EAAAC,SAAAC,yCAAbvB,EAAawB,QAAbxB,EAAayB,gCAAbzB,EAAa,CAAA,MADzB0B,EAAAA,mECKC,SAAAC,EAA6BC,GAAAjC,KAAAiC,OAAAA,SAE7BD,EAAA/B,UAAAiC,UAAA,SAAUC,GACR,OAAOnC,KAAKiC,OAAOrB,YAAYuB,qCAJtBH,GAAUN,EAAAU,kBAAA/B,gDAAV2B,EAAUK,MAAA,wCAAVL,EAAUH,QAAVG,EAAUF,gCAAVE,EAAU,CAAA,MAJtBD,EAAAA,kBACAO,EAAAA,WAAK,CACJC,KAAM,sDCAKC,EAAgB,WAAM,OAAA,IAAI1C,GAE1B2C,EAAqB,SAACR,GAIjC,OAFY,WAAM,OAAAA,EAAO1B,SAKdmC,EAAuB,IAAIC,EAAAA,eAAe,iCAGvCC,EAAoBX,GAClC,GAAIA,EACF,MAAM,IAAIT,MAAM,wGAGlB,MAAO,2BAyCP,SAAAqB,EAAsDC,WAjC/CD,EAAAE,QAAP,SACEC,GAKA,YALA,IAAAA,IAAAA,EAAA,CACEC,QAASrB,EACTsB,WAAYV,IAGP,CACLW,SAAUN,EACVO,UAAW,CACTJ,EACA3C,EACA,CACE4C,QAASI,EAAAA,gBACTH,WAAYT,EACZa,KAAM,CAACjD,GACPkD,OAAO,GAET,CACEN,QAASP,EACTQ,WAAYN,EACZU,KAAM,CAAC,CAACjD,EAAe,IAAImD,EAAAA,SAAY,IAAIC,EAAAA,eAM5CZ,EAAAa,SAAP,WACE,MAAO,CACLP,SAAUN,oCA7BHA,iEAAAA,GAAYnB,EAAAC,SAkCSe,EAAoB,6EAlCzCG,EAAY,CAAAc,aAAA,CAHR3B,GAAU4B,QAAA,CACf5B,yBAECa,EAAY,CAAA,MAJxBgB,EAAAA,eAAS,CACRF,aAAc,CAAC3B,GACf4B,QAAS,CAAC5B,yDAoCGwB,EAAAA,gBAAYM,EAAAA,aAAOpB","sourcesContent":["export abstract class ConfigLoader {\n  abstract loadSettings(): any;\n}\n\nexport class ConfigStaticLoader implements ConfigLoader {\n  constructor(private readonly providedSettings?: any) {\n  }\n\n  loadSettings(): any {\n    return Promise.resolve(this.providedSettings);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ConfigLoader } from './config.loader';\n\n@Injectable()\nexport class ConfigService {\n  protected settings: any;\n\n  constructor(readonly loader: ConfigLoader) {}\n\n  init(): any {\n    return this.loader.loadSettings().then((res: any) => (this.settings = res));\n  }\n\n  getSettings<T = any>(key?: string | Array<string>, defaultValue?: any): T {\n    if (!key || (Array.isArray(key) && !key[0])) {\n      return this.settings;\n    }\n\n    const paths = !Array.isArray(key) ? key.split('.') : key;\n\n    let result = paths.reduce((acc: any, current: string) => acc && acc[current], this.settings);\n\n    if (result === undefined) {\n      result = defaultValue;\n\n      if (result === undefined) {\n        throw new Error(`No setting found with the specified key [${paths.join('/')}]!`);\n      }\n    }\n\n    return result;\n  }\n}\n","import { Injectable, Pipe, PipeTransform } from '@angular/core';\n\nimport { ConfigService } from './config.service';\n\n@Injectable()\n@Pipe({\n  name: 'config'\n})\nexport class ConfigPipe implements PipeTransform {\n  constructor(private readonly config: ConfigService) {}\n\n  transform(value: string | Array<string>): any {\n    return this.config.getSettings(value);\n  }\n}\n","import { APP_INITIALIZER, Inject, InjectionToken, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\n\nimport { ConfigLoader, ConfigStaticLoader } from './config.loader';\nimport { ConfigPipe } from './config.pipe';\nimport { ConfigService } from './config.service';\n\nexport const configFactory = () => new ConfigStaticLoader();\n\nexport const initializerFactory = (config: ConfigService) => {\n  // workaround for AoT compilation\n  const res = () => config.init();\n\n  return res;\n};\n\nexport const CONFIG_FORROOT_GUARD = new InjectionToken('CONFIG_FORROOT_GUARD');\n\n// tslint:disable-next-line:only-arrow-functions\nexport function provideForRootGuard(config?: ConfigService): any {\n  if (config) {\n    throw new Error(`ConfigModule.forRoot() called twice. Lazy loaded modules should use ConfigModule.forChild() instead.`);\n  }\n\n  return 'guarded';\n}\n\n@NgModule({\n  declarations: [ConfigPipe],\n  exports: [ConfigPipe]\n})\nexport class ConfigModule {\n  static forRoot(\n    configuredProvider: any = {\n      provide: ConfigLoader,\n      useFactory: configFactory\n    }\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        configuredProvider,\n        ConfigService,\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initializerFactory,\n          deps: [ConfigService],\n          multi: true\n        },\n        {\n          provide: CONFIG_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[ConfigService, new Optional(), new SkipSelf()]]\n        }\n      ]\n    };\n  }\n\n  static forChild(): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule\n    };\n  }\n\n  // tslint:disable-next-line:no-empty\n  constructor(@Optional() @Inject(CONFIG_FORROOT_GUARD) guard: any) {}\n}\n"]}