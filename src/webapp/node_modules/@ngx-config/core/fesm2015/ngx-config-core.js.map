{"version":3,"file":"ngx-config-core.js","sources":["ng://@ngx-config/core/config.loader.ts","ng://@ngx-config/core/config.service.ts","ng://@ngx-config/core/config.pipe.ts","ng://@ngx-config/core/config.module.ts"],"sourcesContent":["export abstract class ConfigLoader {\n  abstract loadSettings(): any;\n}\n\nexport class ConfigStaticLoader implements ConfigLoader {\n  constructor(private readonly providedSettings?: any) {\n  }\n\n  loadSettings(): any {\n    return Promise.resolve(this.providedSettings);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ConfigLoader } from './config.loader';\n\n@Injectable()\nexport class ConfigService {\n  protected settings: any;\n\n  constructor(readonly loader: ConfigLoader) {}\n\n  init(): any {\n    return this.loader.loadSettings().then((res: any) => (this.settings = res));\n  }\n\n  getSettings<T = any>(key?: string | Array<string>, defaultValue?: any): T {\n    if (!key || (Array.isArray(key) && !key[0])) {\n      return this.settings;\n    }\n\n    const paths = !Array.isArray(key) ? key.split('.') : key;\n\n    let result = paths.reduce((acc: any, current: string) => acc && acc[current], this.settings);\n\n    if (result === undefined) {\n      result = defaultValue;\n\n      if (result === undefined) {\n        throw new Error(`No setting found with the specified key [${paths.join('/')}]!`);\n      }\n    }\n\n    return result;\n  }\n}\n","import { Injectable, Pipe, PipeTransform } from '@angular/core';\n\nimport { ConfigService } from './config.service';\n\n@Injectable()\n@Pipe({\n  name: 'config'\n})\nexport class ConfigPipe implements PipeTransform {\n  constructor(private readonly config: ConfigService) {}\n\n  transform(value: string | Array<string>): any {\n    return this.config.getSettings(value);\n  }\n}\n","import { APP_INITIALIZER, Inject, InjectionToken, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\n\nimport { ConfigLoader, ConfigStaticLoader } from './config.loader';\nimport { ConfigPipe } from './config.pipe';\nimport { ConfigService } from './config.service';\n\nexport const configFactory = () => new ConfigStaticLoader();\n\nexport const initializerFactory = (config: ConfigService) => {\n  // workaround for AoT compilation\n  const res = () => config.init();\n\n  return res;\n};\n\nexport const CONFIG_FORROOT_GUARD = new InjectionToken('CONFIG_FORROOT_GUARD');\n\n// tslint:disable-next-line:only-arrow-functions\nexport function provideForRootGuard(config?: ConfigService): any {\n  if (config) {\n    throw new Error(`ConfigModule.forRoot() called twice. Lazy loaded modules should use ConfigModule.forChild() instead.`);\n  }\n\n  return 'guarded';\n}\n\n@NgModule({\n  declarations: [ConfigPipe],\n  exports: [ConfigPipe]\n})\nexport class ConfigModule {\n  static forRoot(\n    configuredProvider: any = {\n      provide: ConfigLoader,\n      useFactory: configFactory\n    }\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        configuredProvider,\n        ConfigService,\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initializerFactory,\n          deps: [ConfigService],\n          multi: true\n        },\n        {\n          provide: CONFIG_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[ConfigService, new Optional(), new SkipSelf()]]\n        }\n      ]\n    };\n  }\n\n  static forChild(): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule\n    };\n  }\n\n  // tslint:disable-next-line:no-empty\n  constructor(@Optional() @Inject(CONFIG_FORROOT_GUARD) guard: any) {}\n}\n"],"names":[],"mappings":";;MAAsB,YAAY;CAEjC;MAEY,kBAAkB;IAC7B,YAA6B,gBAAsB;QAAtB,qBAAgB,GAAhB,gBAAgB,CAAM;KAClD;IAED,YAAY;QACV,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAC/C;;;MCLU,aAAa;IAGxB,YAAqB,MAAoB;QAApB,WAAM,GAAN,MAAM,CAAc;KAAI;IAE7C,IAAI;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,CAAC,GAAQ,MAAM,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC;KAC7E;IAED,WAAW,CAAU,GAA4B,EAAE,YAAkB;QACnE,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QAED,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QAEzD,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,OAAe,KAAK,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE7F,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,GAAG,YAAY,CAAC;YAEtB,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,4CAA4C,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aAClF;SACF;QAED,OAAO,MAAM,CAAC;KACf;;0EA3BU,aAAa;kDAAb,aAAa,WAAb,aAAa;iCAAb,aAAa;cADzB,UAAU;;;MCIE,UAAU;IACrB,YAA6B,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;KAAI;IAEtD,SAAS,CAAC,KAA6B;QACrC,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KACvC;;oEALU,UAAU;wDAAV,UAAU;+CAAV,UAAU,WAAV,UAAU;iCAAV,UAAU;cAJtB,UAAU;;cACV,IAAI;eAAC;gBACJ,IAAI,EAAE,QAAQ;aACf;;;MCDY,aAAa,GAAG,MAAM,IAAI,kBAAkB,GAAG;MAE/C,kBAAkB,GAAG,CAAC,MAAqB;IAEtD,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;IAEhC,OAAO,GAAG,CAAC;AACb,EAAE;MAEW,oBAAoB,GAAG,IAAI,cAAc,CAAC,sBAAsB,EAAE;SAG/D,mBAAmB,CAAC,MAAsB;IACxD,IAAI,MAAM,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,sGAAsG,CAAC,CAAC;KACzH;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;MAMY,YAAY;IAkCvB,YAAsD,KAAU,KAAI;IAjCpE,OAAO,OAAO,CACZ,qBAA0B;QACxB,OAAO,EAAE,YAAY;QACrB,UAAU,EAAE,aAAa;KAC1B;QAED,OAAO;YACL,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE;gBACT,kBAAkB;gBAClB,aAAa;gBACb;oBACE,OAAO,EAAE,eAAe;oBACxB,UAAU,EAAE,kBAAkB;oBAC9B,IAAI,EAAE,CAAC,aAAa,CAAC;oBACrB,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,UAAU,EAAE,mBAAmB;oBAC/B,IAAI,EAAE,CAAC,CAAC,aAAa,EAAE,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,CAAC,CAAC;iBACxD;aACF;SACF,CAAC;KACH;IAED,OAAO,QAAQ;QACb,OAAO;YACL,QAAQ,EAAE,YAAY;SACvB,CAAC;KACH;;6CA/BU,YAAY;oGAAZ,YAAY,WAkCS,oBAAoB;qFAlCzC,YAAY,mBAHR,UAAU,aACf,UAAU;iCAET,YAAY;cAJxB,QAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,UAAU,CAAC;gBAC1B,OAAO,EAAE,CAAC,UAAU,CAAC;aACtB;;sBAmCc,QAAQ;;sBAAI,MAAM;uBAAC,oBAAoB;;;;;"}